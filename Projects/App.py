import tkinter as tk
import random
from functools import partial
import webbrowser
import time


# =-=-=-= –°–¢–í–û–†–ï–ù–ù–Ø –ö–õ–ê–°–£ =-=-=-=
class Game:
    def __init__(self, root):
        self.root = root
        self.root.title("–ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π")
        self.root.geometry("550x650")
        self.root.resizable(False, False)

        self.symbols = {
            'water': 'üåä',
            'hit': 'üí•',
            'miss': '‚Ä¢',
            'dead': '‚ùå'
        }

        self.show_menu()

    # =-=-=-= –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ì–†–ò =-=-=-=
    def setup(self):
        self.size = 10
        self.ships = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]
        self.hits = 0
        self.miss = 0
        self.dead = 0
        self.all_ships = sum(self.ships)
        self.start_time = 0
        self.playing = True

        # –Ü–≥—Ä–æ–≤—ñ –ø–æ–ª—è
        self.grid = [[0 for _ in range(self.size)] for _ in range(self.size)]
        self.shots = [[0 for _ in range(self.size)] for _ in range(self.size)]
        self.buttons = [[None for _ in range(self.size)] for _ in range(self.size)]

        self.make_ships()

    # =-=-=-= –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ =-=-=-=
    def show_menu(self):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –∏ —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é
        self.playing = False

        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        self.clear()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self.root, text="–ú–æ—Ä—Å—å–∫–∏–π –ë—ñ–π", font=("Arial", 24, "bold"))
        title.pack(pady=30)

        # –ö–Ω–æ–ø–∫–∞ –ì—Ä–∏
        play = tk.Button(
            self.root,
            text="üéÆ –ì—Ä–∞—Ç–∏",
            font=("Arial", 16),
            command=self.start,
            bg="#4CAF50",
            fg="white"
        )
        play.pack(pady=10, ipadx=30, ipady=10)

        # –ö–Ω–æ–ø–∫–∞ –ü—Ä–∞–≤–∏–ª
        rules = tk.Button(
            self.root,
            text="üìú –ü—Ä–∞–≤–∏–ª–∞",
            font=("Arial", 16),
            command=self.show_rules,
            bg="#2196F3",
            fg="white"
        )
        rules.pack(pady=10, ipadx=30, ipady=10)

        # –ö–Ω–æ–ø–∫–∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        info = tk.Button(
            self.root,
            text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
            font=("Arial", 16),
            command=self.show_info,
            bg="#607D8B",
            fg="white"
        )
        info.pack(pady=10, ipadx=30, ipady=10)

    def update_time(self):
        if not self.playing:
            return
        if not hasattr(self, 'time') or not self.time.winfo_exists():
            return

        try:
            elapsed = int(time.time() - self.start_time)
            minutes = elapsed // 60
            seconds = elapsed % 60
            self.time.config(text=f"–ß–∞—Å: {minutes:02d}:{seconds:02d}")
            if self.playing:
                self.root.after(1000, self.update_time)
        except:
            return

    # =-=-=-= –í–Ü–ö–ù–û –ü–†–ê–í–ò–õ =-=-=-=
    def show_rules(self):
        self.clear()
        rules_text = """
        –ü—Ä–∞–≤–∏–ª–∞ –ú–æ—Ä—Å—å–∫–æ–≥–æ –±–æ—é:

        1. –ì—Ä–∞ –≤–µ–¥–µ—Ç—å—Å—è –Ω–∞ –ø–æ–ª—ñ 10√ó10
        2. –£ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è —î –∫–æ—Ä–∞–±–ª—ñ:
           - 1 –∫–æ—Ä–∞–±–µ–ª—å ‚Äî 4 –∫–ª—ñ—Ç–∏–Ω–∫–∏
           - 2 –∫–æ—Ä–∞–±–ª—ñ ‚Äî 3 –∫–ª—ñ—Ç–∏–Ω–∫–∏
           - 3 –∫–æ—Ä–∞–±–ª—ñ ‚Äî 2 –∫–ª—ñ—Ç–∏–Ω–∫–∏
           - 4 –∫–æ—Ä–∞–±–ª—ñ ‚Äî 1 –∫–ª—ñ—Ç–∏–Ω–∫–∞
        3. –ö–æ—Ä–∞–±–ª—ñ –Ω–µ –º–æ–∂—É—Ç—å —Ç–æ—Ä–∫–∞—Ç–∏—Å—è –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ
        4. –ì—Ä–∞–≤–µ—Ü—å —Ä–æ–±–∏—Ç—å –ø–æ—Å—Ç—Ä—ñ–ª–∏, –∫–ª—ñ–∫–∞—é—á–∏ –ø–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º
        5. –ú–µ—Ç–∞ ‚Äî –ø–µ—Ä—à–∏–º –∑–Ω–∏—â–∏—Ç–∏ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

        –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è:
        üåä - –≤–æ–¥–∞ (—â–µ –Ω–µ —Å—Ç—Ä—ñ–ª—è–ª–∏)
         ‚Ä¢ - –ø—Ä–æ–º–∞—Ö
        üí• - –ø–æ–ø–∞–¥–∞–Ω–Ω—è
        ‚ùå - –∑–Ω–∏—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å
        """

        frame = tk.Frame(self.root)
        frame.pack(pady=20, padx=20)

        label = tk.Label(
            frame,
            text=rules_text,
            font=("Arial", 12),
            justify="left"
        )
        label.pack()

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        back = tk.Button(
            self.root,
            text="‚Üê –ù–∞–∑–∞–¥",
            font=("Arial", 14),
            command=self.show_menu,
            bg="#9E9E9E",
            fg="white"
        )
        back.pack(pady=20)

    # =-=-=-= –í–Ü–ö–ù–û –Ü–ù–§–û–†–ú–ê–¶–Ü–á =-=-=-=
    def show_info(self):
        self.clear()

        frame = tk.Frame(self.root)
        frame.pack(pady=40)

        label = tk.Label(
            frame,
            text="–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:",
            font=("Arial", 22)
        )
        label.pack(pady=10)

        button_frame1 = tk.Frame(frame)
        button_frame1.pack(pady=10)

        go1 = tk.Button(
            button_frame1,
            text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–∏ ‚Üí",
            font=("Arial", 14),
            command=lambda: webbrowser.open("https://github.com/KirsanowArtem/KirsanovArtemProject9class/blob/main/Projects/App.py"),
            bg="#2196F3",
            fg="white"
        )
        go1.pack(side=tk.LEFT, padx=10)

        button_frame2 = tk.Frame(frame)
        button_frame2.pack(pady=10)

        go2 = tk.Button(
            button_frame2,
            text="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É ‚Üí",
            font=("Arial", 14),
            command=lambda: webbrowser.open(
                "https://drive.google.com/drive/folders/1bv1z5TjmJvKBxCHejtbP6wfkBisIZzQD?usp=sharing"),
            bg="#2196F3",
            fg="white"
        )
        go2.pack(side=tk.LEFT, padx=10)

        button_frame3 = tk.Frame(frame)
        button_frame3.pack(pady=10)

        go3 = tk.Button(
            button_frame3,
            text="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è ‚Üí",
            font=("Arial", 14),
            command=lambda: webbrowser.open(
                "https://docs.google.com/presentation/d/1Oxf46naBlp-bQ7loUpDzCnZ0415qihTb/edit?usp=sharing&ouid=101339484759200254768&rtpof=true&sd=true"),
            bg="#2196F3",
            fg="white"
        )
        go3.pack(side=tk.LEFT, padx=10)

        button_frame4 = tk.Frame(frame)
        button_frame4.pack(pady=10)

        go4 = tk.Button(
            button_frame4,
            text="–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ ‚Üí",
            font=("Arial", 14),
            command=lambda: webbrowser.open(
                "https://t.me/ArtemKirss"),
            bg="#2196F3",
            fg="white"
        )
        go4.pack(side=tk.LEFT, padx=10)

        back = tk.Button(
            self.root,
            text="‚Üê –ù–∞–∑–∞–¥",
            font=("Arial", 14),
            command=self.show_menu,
            bg="#9E9E9E",
            fg="white"
        )
        back.pack(pady=10)

    # =-=-=-= –ü–û–ß–ê–¢–û–ö –ì–†–ò =-=-=-=
    def start(self):
        self.setup()
        self.clear()
        self.make_board()
        self.start_time = time.time()

    def make_board(self):
        # –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        top = tk.Frame(self.root)
        top.pack(fill=tk.X, pady=10, padx=10)

        # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        menu = tk.Button(
            top,
            text="‚â° –ú–µ–Ω—é",
            font=("Arial", 12),
            command=self.show_menu,
            bg="#9E9E9E",
            fg="white"
        )
        menu.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—É
        reset = tk.Button(
            top,
            text="‚Üª –†–µ—Å—Ç–∞—Ä—Ç",
            font=("Arial", 12),
            command=self.start,
            bg="#FF9800",
            fg="white"
        )
        reset.pack(side=tk.LEFT, padx=5)

        # –ß–∞—Å
        self.time = tk.Label(
            top,
            text="–ß–∞—Å: 00:00",
            font=('Arial', 12)
        )
        self.time.pack(side=tk.LEFT, expand=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.score = tk.Label(
            top,
            text=f"üî¥ {self.hits:02d}  ‚ö™ {self.miss:02d}  üíÄ {self.dead:02d}/{len(self.ships):02d}",
            font=('Arial', 12)
        )
        self.score.pack(side=tk.RIGHT)

        # –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
        board = tk.Frame(self.root)
        board.pack(pady=10)

        for y in range(self.size):
            for x in range(self.size):
                btn = tk.Button(
                    board,
                    text=self.symbols['water'],
                    font=('Arial', 16),
                    width=2,
                    height=1,
                    command=partial(self.shoot, x, y),
                    bg="#BBDEFB"
                )
                btn.grid(row=y, column=x, padx=1, pady=1)
                self.buttons[y][x] = btn

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É
        self.win = tk.Label(
            self.root,
            text="",
            font=("Arial", 16, "bold"),
            fg="#4CAF50"
        )
        self.win.pack(pady=10)

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        self.update_time()

    def shoot(self, x, y):
        if not self.playing or self.shots[y][x] != 0:
            return

        if self.grid[y][x] == 1:
            self.shots[y][x] = 2
            self.buttons[y][x].config(text=self.symbols['hit'], bg="#FFCDD2")
            self.hits += 1

            if self.check_sunk(x, y):
                self.mark_sunk(x, y)
                self.dead += 1

            if self.dead == len(self.ships):
                self.playing = False
                elapsed = int(time.time() - self.start_time)
                minutes = elapsed // 60
                seconds = elapsed % 60
                self.win.config(
                    text=f"–ü–ï–†–ï–ú–û–ì–ê! –ß–∞—Å: {minutes:02d}:{seconds:02d}\n" +
                         f"–ü–æ–ø–∞–¥–∞–Ω—å: {self.hits} | –ü—Ä–æ–º–∞—Ö—ñ–≤: {self.miss}"
                )
        else:
            self.shots[y][x] = 1  # –ü—Ä–æ–º–∞—Ö
            self.buttons[y][x].config(text=self.symbols['miss'], bg="#E0E0E0")
            self.miss += 1

        self.update_score()

    def update_score(self): # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.score.config(
            text=f"üî¥ {self.hits:02d}  ‚ö™ {self.miss:02d}  üíÄ {self.dead:02d}/{len(self.ships):02d}"
        )

    # =-=-=-= –õ–û–ì–Ü–ö–ê –ì–†–ò =-=-=-=
    def make_ships(self):
        for size in self.ships: # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ—Ä–∞–±–ª—ñ–≤
            placed = False
            while not placed:
                dir = random.randint(0, 1)  # 0 - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, 1 - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ

                if dir == 0:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
                    max_x = self.size - size
                    max_y = self.size
                    x = random.randint(0, max_x)
                    y = random.randint(0, max_y - 1)

                    if self.can_place(x, y, size, dir):
                        for i in range(size):
                            self.grid[y][x + i] = 1
                        placed = True

                else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                    max_x = self.size
                    max_y = self.size - size
                    x = random.randint(0, max_x - 1)
                    y = random.randint(0, max_y)

                    if self.can_place(x, y, size, dir):
                        for i in range(size):
                            self.grid[y + i][x] = 1
                        placed = True

    def can_place(self, x, y, size, dir): # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
        for i in range(size):
            if dir == 0:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
                if self.grid[y][x + i] == 1:
                    return False
            else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                if self.grid[y + i][x] == 1:
                    return False

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É—Å—ñ–¥–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
            for dy in [-1, 0, 1]:
                for dx in [-1, 0, 1]:
                    if dir == 0:
                        nx, ny = x + i + dx, y + dy
                    else:
                        nx, ny = x + dx, y + i + dy

                    if 0 <= nx < self.size and 0 <= ny < self.size:
                        if self.grid[ny][nx] == 1:
                            return False
        return True

    def check_sunk(self, x, y): # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è
        cells = []
        seen = set()
        queue = [(x, y)]

        while queue:
            cx, cy = queue.pop()
            if (cx, cy) in seen:
                continue
            seen.add((cx, cy))

            if 0 <= cx < self.size and 0 <= cy < self.size and self.grid[cy][cx] == 1:
                cells.append((cx, cy))
                queue.extend([(cx + 1, cy), (cx - 1, cy), (cx, cy + 1), (cx, cy - 1)])

        return all(self.shots[cy][cx] == 2 for cx, cy in cells)

    def mark_sunk(self, x, y): # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ –∑–Ω–∏—â–µ–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
        cells = []
        seen = set()
        queue = [(x, y)]

        while queue:
            cx, cy = queue.pop()
            if (cx, cy) in seen:
                continue
            seen.add((cx, cy))

            if 0 <= cx < self.size and 0 <= cy < self.size and self.grid[cy][cx] == 1:
                cells.append((cx, cy))
                queue.extend([(cx + 1, cy), (cx - 1, cy), (cx, cy + 1), (cx, cy - 1)])

        for cx, cy in cells:
            self.buttons[cy][cx].config(text=self.symbols['dead'], bg="#FF8A80")

    # =-=-=-= –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =-=-=-=
    def clear(self): # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞
        for widget in self.root.winfo_children():
            widget.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    game = Game(root)
    root.mainloop()